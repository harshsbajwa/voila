services:
  # Database Services
  questdb:
    image: questdb/questdb:latest
    container_name: questdb
    restart: unless-stopped
    ports:
      - "8812:8812"  # PostgreSQL wire protocol
      - "9000:9000"  # Web Console & HTTP API
      - "9009:9009"  # InfluxDB line protocol
    volumes:
      - ./.volumes/questdb:/var/lib/questdb
    environment:
      - QDB_PG_USER=admin
      - QDB_PG_PASSWORD=quest
      - QDB_HTTP_ENABLED=true
      - QDB_PG_ENABLED=true
      - QDB_LINE_TCP_ENABLED=true
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "timeout", "5s", "bash", "-c", "</dev/tcp/localhost/9000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./.volumes/redis:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Airflow Database
  postgres:
    image: postgres:16-alpine
    container_name: airflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./.volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # FastAPI Backend
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: fastapi-backend
    restart: unless-stopped
    env_file: .env.production
    volumes:
      - ./data:/app/data:ro
    depends_on:
      questdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: nginx-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      fastapi:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Airflow Services
  airflow-init:
    image: apache/airflow:2.8.2-python3.11
    container_name: airflow-init
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: airflow123
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    volumes:
      - ./airflow:/opt/airflow
      - ./scrape:/opt/airflow/scrape
      - ./shared:/opt/airflow/shared
      - ./data:/opt/airflow/data
      - ./airflow/requirements.txt:/requirements.txt
    user: "0:0"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        pip install -r /requirements.txt &&
        mkdir -p /opt/airflow/logs &&
        chmod -R 755 /opt/airflow/logs &&
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@voila.amneet.me --password airflow123
      "
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  airflow-webserver:
    image: apache/airflow:2.8.2-python3.11
    container_name: airflow-webserver
    restart: unless-stopped
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    command: webserver
    ports:
      - "8080:8080"
    volumes:
      - ./airflow:/opt/airflow
      - ./scrape:/opt/airflow/scrape
      - ./shared:/opt/airflow/shared
      - ./data:/opt/airflow/data
      - ./airflow/requirements.txt:/requirements.txt
    user: "50000:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  airflow-scheduler:
    image: apache/airflow:2.8.2-python3.11
    container_name: airflow-scheduler
    restart: unless-stopped
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    command: scheduler
    volumes:
      - ./airflow:/opt/airflow
      - ./scrape:/opt/airflow/scrape
      - ./shared:/opt/airflow/shared
      - ./data:/opt/airflow/data
      - ./airflow/requirements.txt:/requirements.txt
    user: "50000:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

volumes:
  questdb-data:
  redis-data:
  postgres-data:
  airflow-logs:
